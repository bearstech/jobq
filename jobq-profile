#!/usr/bin/perl

# Print a profile (number of calls andt total time) for every command
# invoked by jobq. Needs to be fed with syslog'ed data via STDIN.
#
#   jobq-profile -q encoder < /var/log/user.log

# Copyright (C) 2009,2010 Bearstech - http://bearstech.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


use strict;
use warnings;
use Getopt::Long;

my $program = 'jobq-profile';
my $version = '0.9.0';

my %job_by_id;
my %jobtime;
my %jobcall;

sub usage {
    print STDERR <<EOF;
Usage: $0 [-u user] [-q queue] [/var/log/user.log] [...]

Show number of calls and cumulated (wall clock) time for every job
run via jobq, sorted by cumulated time.

Since jobq sends statistics to the 'user' syslog facility, jobq-profile
defaults to parsing 'user.log'. The default user is the current user
(\$LOGNAME). The default queue is 'default'.

EOF
    exit 1;
}

my $queue = 'default';
my $user  = $ENV{LOGNAME};
usage() if not GetOptions(
    'u|user=s'  => \$user,
    'q|queue=s' => \$queue
);

my @logfiles = @ARGV;
@logfiles = ('/var/log/user.log') if not @logfiles;

my $ctx = "$user/$queue/";

while (@logfiles) {
    my $logfile = shift @logfiles;
    open(my $log, '-|', 'zcat', '-f', $logfile) or warn "$logfile: $!";

    while (<$log>) {
        if (/job\[$ctx(\d+)\]: start \(.*?\): (.*)/) {
            $job_by_id{$1} = $2;
            next;
        }
        if (/job\[$ctx(\d+)\]: done \(time:(\d+)/) {
            my $cmd = $job_by_id{$1};
            next if not defined $cmd;
            $jobtime{$cmd} += $2,
            $jobcall{$cmd}++;
            next;
        }
    }

    close($log) if $log;
}

if (not keys %jobtime) {
    print "No jobq event found for user '$user' and queue '$queue'\n";
    exit;
}
print  "Calls Time(sec) Command\n";
printf("%5d%9d  %s\n", $jobcall{$_}, $jobtime{$_}, $_) foreach sort { $jobtime{$b} - $jobtime{$a} } keys %jobtime;
