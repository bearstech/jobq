#!/bin/bash

# Simple job queue, run one process at once per queue and log timings and delays.
#
# A jobqueue is a simple list of files as $JOBPATH/<queue-name>/<job-id>
# which content is a plain command to execute.

# Copyright (C) 2009,2010 Bearstech - http://bearstech.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROGRAM=jobq
VERSION=0.9.0

# Hardcoded value for now, should fit most people
JOBPATH=/tmp/jobq-$LOGNAME


job_list() {
  cd $JOBPATH/$queue 2>/dev/null || exit 0
  echo "ID     Submission date      Command"
  ls -1rt | \
  while read job; do
    jobt=$(stat -c%y $job 2>/dev/null | cut -d. -f1)
    jobp=$(sed 's/\\\([^\]\)/\1/g' $job 2>/dev/null)
    if [ -n "$jobp" ]; then
      printf "%-5s %20s  %s\n" $job "$jobt" "$jobp"
    fi
  done 
}

job_add() {
  set -e

  # Make sure the queue path exists so we can write our job file
  mkdir -p -m 0700 $JOBPATH
  mkdir -p -m 0700 $JOBPATH/$queue
  cd $JOBPATH/$queue

  # Command line args re-quote - you don't want to know this shell ugliness.
  argv=
  for a in "$@"; do 
    qa=$(printf %q "$a")
    argv="$argv$qa "
  done

  # Hopefully this 'mv' is atomic, thus our joblist is lock-free
  id=$$
  echo "$argv" >.$id && mv .$id $id
  
  # Automatically try to start the queue runner in background. Make sure to
  # restore caller's cwd so referring to $0 still works.
  cd - >/dev/null
  exec "$0" --queue "$queue" --runner
}

queue_runner() {
  if [ "$debug" = yes ]; then
    set -x
    exec 2>/tmp/jobq-debug.$BASHPID
  fi

  mkdir -p -m 0700 $JOBPATH
  mkdir -p -m 0700 $JOBPATH/$queue
  cd $JOBPATH/$queue || exit 1

  # The pidfile is also a lockfile, making sure there's a single runner per queue
  pid=$BASHPID  # And _not_ $$ because we're in a subshell (backgrounded)
  if !(set -o noclobber; echo $pid >.runner) 2>/dev/null; then
    runner=`cat .runner 2>/dev/null`
    if [ "$debug" = yes ]; then
      echo "waking up runner for user/queue '$LOGNAME/$queue' (pid $runner)" | logger -t $PROGRAM
    fi
    kill -USR1 $runner 2>/dev/null && exit

    rm -f .runner
    echo "stale pidfile, removing $PWD/.runner and spawning a new one (unsafe)" | logger -t $PROGRAM
    # Incur a delay which varies wildly when PIDs are close, hopefully minimizing the race condition
    eval "sleep .$(($$ * $$))"
    exec "$0" --queue "$queue" --runner
  fi

  trap "rm -f $PWD/.runner; exit" INT TERM EXIT
  trap ":" USR1
  echo "queue runner started for user/queue '$LOGNAME/$queue' (pid $pid)" | logger -t $PROGRAM

  while true; do
    # Fetch job list in time order, pick older
    job=`ls -1rt 2>/dev/null | head -n1`

    if [ -n "$job" ]; then
      "$0" --queue "$queue" --job "$job" 2>&1 | logger -t "job[$LOGNAME/$queue/$job]"
    else
      # No job, re-scan the queue later: wait 60sec or USR1
      sleep 60 &  # 'sleep' cannot be interrupted by USR1, thus it goes into the background
      wait $!     # 'wait' _can_ be interrupted by USR1
      kill $! 2>/dev/null  # Kill 'sleep' if still running
    fi
  done
}

job_runner() {
  cd $JOBPATH/$queue || exit 1

  cmd=`cat $job`              # content of job file, the command to run
  jobt=`stat -c%Y $job`       # job submission time
  rm $job                     # remove the job, it _will_ be run in a few lines

  # Statistics
  todo=`ls |wc -l`
  t0=`date +%s`
  late=$(( $t0 - $jobt ))
  jobp=$(echo "$cmd" | sed 's/\\\([^\]\)/\1/g')
  echo "start (delay:$late sec, todo:$todo): $jobp"

  if [ -n "$MAILTO" ]; then
    eval $cmd | mailx -e -s "`hostame -f` job[$LOGNAME/$queue/$job]: $jobp" $MAILTO
  else
    eval $cmd
  fi
  ret=$?

  dt=$(( `date +%s` - $t0 ))
  echo "done (time:$dt sec, exit:$ret)"
}

help() {
  cat << EOF
List queue: $PROGRAM [-q <queue>]
Submit job: $PROGRAM [-q <queue>] command args ...

The default queue is called, er, 'default'. One 'queue runner' daemon is
needed per queue and per user, and is started automatically upon first job
submission. There is no mechanism to stop a queue runner besides killing it.

If MAILTO is set, job output (if any) is sent to this address, otherwise it
is syslogged to the user.notice facility. This is a queue runner setting,
either parsed by explicit queue runner start, either while running the first
job for a given user/queue.

Options:
  -h, --help         Show this help
  -q, --queue QUEUE  Select queue (default name is 'default')
  -r, --runner       Explicitly start queue runner (in foreground)
  -v, --version      Show this software revision
EOF
  exit 1
}

version() {
  echo "$PROGRAM $VERSION"
  exit 0
}

queue=default
runner=
job=
debug=no

parse_opt=run
while [ $parse_opt != "done"  ] ; do
  case "$1" in
    -d|--debug)   shift; debug=yes;;
    -h|--help)    help;;
    -j|--job)     shift; job="$1"; shift;;  # Internal option
    -q|--queue)   shift; queue="$1"; shift;;
    -r|--runner)  shift; runner=yes;;
    -v|--version) version;;

    --) parse_opt=done;;
    -*) echo "$PROGRAM: unknown option $1, try -h for help" >&2; exit 2;;
     *) parse_opt=done;;
  esac
done

if [ -n "$runner" ]; then
  queue_runner </dev/null >/dev/null 2>/dev/null &
  exit 0
fi
if [ -n "$job" ]; then
  job_runner
  exit 0
fi
if [ $# -gt 0 ]; then
  job_add "$@"
else
  job_list
fi
